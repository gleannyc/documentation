# This config uses the `.circleci/extended/orb-test.yml` as its base, and then publishes the app to S3.
# The workflow contained here demonstrates a practical application of `post-steps`
# and using workspace persistence
version: 2.1

orbs:
  node: circleci/node@4.1
  # The S3 orb will setup the aws-cli and quickly copy or sync anything to s3.
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/aws-s3
  # NOTE: Environment variables containing the necessary secrets can be setup in the CircleCI UI
  # See here https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project
  aws-s3: circleci/aws-s3@2.0

workflows:
  build-prod:
    jobs:
      - prod_deploy:
          filters:
            branches:
              only:
                - main
  build-stage:
    jobs:
      - stage_deploy:
          filters:
            branches:
              only:
                - /rc-.*/

jobs:
  prod_deploy:
    docker:
      - image: cimg/node:16.16.0
    steps:
      - checkout
      - run: npm ci
      - run: SEGMENT_KEY=${PROD_SEGMENT_API_KEY} npm run build
      - aws-s3/sync:
          from: site/
          to: s3://docs.glean.io
          arguments: --delete
          aws-access-key-id: USER_AWS_KEY
          aws-secret-access-key: USER_AWS_SECRET
          aws-region: AWS_REGION

  stage_deploy:
    docker:
      - image: cimg/node:16.16.0
    steps:
      - checkout
      - run: npm ci
      - run: SEGMENT_KEY=${PROD_SEGMENT_API_KEY} npm run build
      - aws-s3/sync:
          from: build/
          to: s3://docs.glean.io/${CIRCLE_BRANCH}
          aws-access-key-id: USER_AWS_KEY
          aws-secret-access-key: USER_AWS_SECRET
          aws-region: AWS_REGION

experimental:
  notify:
    branches:
      only:
        - main
